import "../libraries/OCP_Constants.sol" ;
import "../external-interfaces/ITokensReceivedCallback.sol" ;
import "../external-interfaces/ITONTokenWallet.sol" ;
import "../external-interfaces/IRootTokenContract.sol" ;
import "../interfaces/I_OCP_ReverseAuction.sol" ;


contract OCP_AuctionBidder is ITokensReceivedCallback {

  // tvm.pubkey() == s_bidder_pubkey
  address static s_bidder_wallet ;
  address static s_auction ;

  address g_root_vault ;
  address g_bidder_vault ;

  uint128 g_bidder_vault_balance ;
  uint128 g_bidder_vault_target ;

  bool g_locked ;
  
  constructor (
               address root_vault,
               uint128 bidder_vault_target
               ) public
    {
      require( address(this).balance >= OCP_Constants.MINIMAL_INITIAL_BALANCE,
               OCP_Constants.EXN_NOT_ENOUGH_BALANCE );
      tvm.accept();
      g_root_vault = root_vault ;
      g_bidder_vault_target = bidder_vault_target ;
      IRootTokenContract( g_root_vault ).
        deployEmptyWallet(
                          OCP_Constants.DEPLOY_WALLET_GRAMS,
                          0,
                          address(this),
                          address(this)
                          ) ;
      IRootTokenContract( g_root_vault ).getWalletAddress{
          value: OCP_Constants.QUERY_ADDRESS_GRAMS,
          callback:set_vault_address
          }(
            0,
            address(this)
            );
    }

  function set_vault_address( address bidder_vault ) public
  {
    require( msg.sender.value != 0 && msg.sender == g_root_vault,
             OCP_Constants.EXN_AUTH_FAILED );
    g_bidder_vault = bidder_vault ;
    ITONTokenWallet( g_bidder_vault ).
      setReceiveCallback( address(this), false );
  }

  function tokensReceivedCallback(
                                  address /*token_wallet*/,
                                  address /*token_root*/,
                                  uint128 amount,
                                  uint256 /* sender_public_key */,
                                  address /* sender_address */,
                                  address sender_wallet,
                                  address /*original_gas_to*/,
                                  uint128 /*updated_balance*/,
                                  TvmCell /*payload*/
    ) public override
  {
    require( g_bidder_vault.value != 0
             && msg.sender == g_bidder_vault
             , OCP_Constants.EXN_AUTH_FAILED );
    TvmCell empty ;
    g_bidder_vault_balance += amount ;
    if( g_bidder_vault_balance > g_bidder_vault_target ){

      ITONTokenWallet( g_bidder_vault ).
        transfer(
                 sender_wallet,
                 g_bidder_vault_balance - g_bidder_vault_target,
                 0,
                 address(this),
                 true,
                 empty
                 );
    }
  }


  function bid( uint128 amount ) public 
  {
    require( tvm.pubkey() == msg.pubkey (), OCP_Constants.EXN_AUTH_FAILED );
    require( g_bidder_vault_target <= g_bidder_vault_balance,
             OCP_Constants.EXN_NOT_ENOUGH_BALANCE );
    require( !g_locked, OCP_Constants.EXN_ALREADY_BIDDING );
    tvm.accept() ;
    g_locked = true ;
    I_OCP_ReverseAuction( s_auction ).
      bid( amount, s_bidder_wallet, tvm.pubkey() );
  }

  function unbid(  ) public
  {
    require ( msg.sender.value != 0 && msg.sender == s_auction,
              OCP_Constants.EXN_AUTH_FAILED );
    g_locked = false ;
  }

  function empty_vault ( address owner_vault ) public
  {
    require( msg.pubkey() == tvm.pubkey(), OCP_Constants.EXN_AUTH_FAILED );
    tvm.accept();
    TvmCell empty ;
    ITONTokenWallet( g_bidder_vault ).
        transfer(
                 owner_vault,
                 g_bidder_vault_balance,
                 0,
                 address(this),
                 true,
                 empty
                 );
    g_bidder_vault_balance = 0;
  }

  function winner ( address owner_vault ) public
  {
    require( msg.sender.value != 0 &&
             msg.sender == s_auction, OCP_Constants.EXN_AUTH_FAILED );
    TvmCell empty;
    ITONTokenWallet( g_bidder_vault ).
      transfer(
               owner_vault,
               g_bidder_vault_balance,
               0,
               address(this),
               true,
               empty
               );
    g_bidder_vault_balance = 0 ;
    g_bidder_vault_target = 0 ;
  }

}

